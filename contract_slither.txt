'solc --version' running
'solc contract.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/root/Smart-Contract-Files' running
Compilation warnings/errors on contract.sol:
Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> contract.sol

Warning: Return value of low-level calls not used.
  --> contract.sol:45:9:
   |
45 |         delegate.delegatecall(data);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^


INFO:Detectors:
VulnerablePatterns.execDelegate(bytes) (contract.sol#42-46) uses delegatecall to a input-controlled function id
	- delegate.delegatecall(data) (contract.sol#45)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#controlled-delegatecall
INFO:Detectors:
Reentrancy in VulnerablePatterns.withdraw(uint256) (contract.sol#26-32):
	External calls:
	- (ok,None) = msg.sender.call{value: amount}() (contract.sol#29)
	State variables written after the call(s):
	- balances[msg.sender] -= amount (contract.sol#31)
	VulnerablePatterns.balances (contract.sol#6) can be used in cross function reentrancies:
	- VulnerablePatterns.balances (contract.sol#6)
	- VulnerablePatterns.deposit() (contract.sol#22-24)
	- VulnerablePatterns.withdraw(uint256) (contract.sol#26-32)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities
INFO:Detectors:
VulnerablePatterns.kill() (contract.sol#49-52) allows anyone to destruct the contract
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#suicidal
INFO:Detectors:
VulnerablePatterns.setDelegate(address) (contract.sol#35-39) uses tx.origin for authorization: require(bool,string)(tx.origin == owner,not owner) (contract.sol#37)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-usage-of-txorigin
INFO:Detectors:
VulnerablePatterns.execDelegate(bytes) (contract.sol#42-46) ignores return value by delegate.delegatecall(data) (contract.sol#45)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-low-level-calls
INFO:Detectors:
VulnerablePatterns.setDelegate(address)._d (contract.sol#35) lacks a zero-check on :
		- delegate = _d (contract.sol#38)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
Version constraint ^0.6.12 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup.
It is used by:
	- ^0.6.12 (contract.sol#3)
solc-0.6.12 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in VulnerablePatterns.withdraw(uint256) (contract.sol#26-32):
	- (ok,None) = msg.sender.call{value: amount}() (contract.sol#29)
Low level call in VulnerablePatterns.execDelegate(bytes) (contract.sol#42-46):
	- delegate.delegatecall(data) (contract.sol#45)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Parameter VulnerablePatterns.setDelegate(address)._d (contract.sol#35) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
VulnerablePatterns.owner (contract.sol#7) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
INFO:Slither:contract.sol analyzed (1 contracts with 100 detectors), 12 result(s) found
