'solc --version' running
'solc contract.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/root/Smart-Contract-Files' running
Compilation warnings/errors on contract.sol:
Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> contract.sol

Warning: Source file does not specify required compiler version! Consider adding "pragma solidity ^0.8.30;"
--> contract.sol

Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it "abstract" is sufficient.
  --> contract.sol:11:2:
   |
11 | 	constructor(address addr) public {
   | 	^ (Relevant source part starts here and spans across multiple lines).

Warning: Return value of low-level calls not used.
  --> contract.sol:16:6:
   |
16 | 	    fixed_address.call("");
   | 	    ^^^^^^^^^^^^^^^^^^^^^^

Warning: Return value of low-level calls not used.
  --> contract.sol:20:6:
   |
20 | 	    fixed_address.call("");
   | 	    ^^^^^^^^^^^^^^^^^^^^^^

Warning: Return value of low-level calls not used.
  --> contract.sol:25:6:
   |
25 | 	    addr.call("");
   | 	    ^^^^^^^^^^^^^

Warning: Return value of low-level calls not used.
  --> contract.sol:29:6:
   |
29 | 	    stored_address.call("");
   | 	    ^^^^^^^^^^^^^^^^^^^^^^^


INFO:Detectors:
Caller.thisisfine() (contract.sol#15-17) ignores return value by fixed_address.call() (contract.sol#16)
Caller.reentrancy() (contract.sol#19-22) ignores return value by fixed_address.call() (contract.sol#20)
Caller.calluseraddress(address) (contract.sol#24-26) ignores return value by addr.call() (contract.sol#25)
Caller.callstoredaddress() (contract.sol#28-30) ignores return value by stored_address.call() (contract.sol#29)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-low-level-calls
INFO:Detectors:
Caller.constructor(address).addr (contract.sol#11) lacks a zero-check on :
		- fixed_address = addr (contract.sol#12)
Caller.calluseraddress(address).addr (contract.sol#24) lacks a zero-check on :
		- addr.call() (contract.sol#25)
Caller.setstoredaddress(address).addr (contract.sol#32) lacks a zero-check on :
		- stored_address = addr (contract.sol#33)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
Reentrancy in Caller.reentrancy() (contract.sol#19-22):
	External calls:
	- fixed_address.call() (contract.sol#20)
	State variables written after the call(s):
	- statevar = 0 (contract.sol#21)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Low level call in Caller.thisisfine() (contract.sol#15-17):
	- fixed_address.call() (contract.sol#16)
Low level call in Caller.reentrancy() (contract.sol#19-22):
	- fixed_address.call() (contract.sol#20)
Low level call in Caller.calluseraddress(address) (contract.sol#24-26):
	- addr.call() (contract.sol#25)
Low level call in Caller.callstoredaddress() (contract.sol#28-30):
	- stored_address.call() (contract.sol#29)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Variable Caller.fixed_address (contract.sol#6) is not in mixedCase
Variable Caller.stored_address (contract.sol#7) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Caller.fixed_address (contract.sol#6) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
INFO:Slither:contract.sol analyzed (1 contracts with 100 detectors), 15 result(s) found
